// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth core models (compatible with Prisma Adapter)
model User {
  id             String    @id @default(cuid())
  email          String    @unique
  password       String
  emailVerified  DateTime?
  createdAt      DateTime  @default(now())
  
  // Usage control fields
  resumeCount    Int       @default(0)
  coverCount     Int       @default(0)
  monthlyResumeLimit  Int  @default(10)   // Free tier: 10 resumes per month
  monthlyCoverLimit   Int  @default(10)   // Free tier: 10 cover letters per month
  currentPeriodStart  DateTime @default(now())
  isBlocked      Boolean   @default(false)
  blockReason    String?
  
  accounts       Account[]
  sessions       Session[]
  resumes        Resume[]
  coverLetters   CoverLetter[]
  proposals      Proposal[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// App domain models
model Resume {
  id               String   @id @default(cuid())
  userId           String
  title            String?
  content          String   @db.Text
  optimizedContent String?  @db.Text
  createdAt        DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  coverLetters CoverLetter[]
  proposals    Proposal[]

  @@index([userId, createdAt])
}

model CoverLetter {
  id        String   @id @default(cuid())
  userId    String
  resumeId  String?
  jobTitle  String
  company   String
  content   String   @db.Text
  jobDescription String? @db.Text
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  resume Resume? @relation(fields: [resumeId], references: [id], onDelete: SetNull)

  @@index([userId, createdAt])
  @@index([resumeId])
}

model Proposal {
  id             String   @id @default(cuid())
  userId         String
  resumeId       String?
  projectTitle   String
  clientName     String?
  content        String   @db.Text
  projectDetails String?  @db.Text
  budget         String?
  createdAt      DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  resume Resume? @relation(fields: [resumeId], references: [id], onDelete: SetNull)

  @@index([userId, createdAt])
  @@index([resumeId])
}
